@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@model MonitorModel
@{
  ViewBag.Title = "Election Monitor";
  ViewBag.Message = "What's Happening?";

  if (UserSession.EnableOnlineElections)
  {
    ViewData["ExtraScripts"] = new[]
    {
      ClientFile("~/Scripts/vue{0}.js", ".min"),
      ClientFile("~/Scripts/luxon.min.js"),
      ClientFile("~/Scripts/vue-datetime.js"),
    };
    ViewData["ExtraCss"] = new[]
    {
      ClientFile("~/Scripts/vue-datetime.css"),
    };
  }

  ContextItems.AddJavascriptForPage("pageUrl", "monitorPage.controllerUrl={0};".FilledWith(Url.Action("Index").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("locations", "monitorPage.initial={0};".FilledWith(Model.LocationInfoJson));
  ContextItems.AddJavascriptForPage("guest", "monitorPage.isGuest={0};".FilledWith(UserSession.IsGuestTeller.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("monitorPage.T24={0};".FilledWith(UserSession.CurrentElection.T24.SerializedAsJsonString()));
}
<table class="Main">
  <thead>
    <tr>
      <th rowspan="2">
        Location
      </th>
      <th colspan="3">
        Ballots
      </th>
      <th rowspan="2">
        Status
      </th>
      <th rowspan="2">
        @(UserSession.CurrentElection.IsSingleNameElection ? "Groups" : "Computers")
      </th>
      <th rowspan="2">
        Contact Info
      </th>
    </tr>
    <tr>
      <th>
        %
      </th>
      <th>
        Counted
      </th>
      <th>
        Entered
      </th>
    </tr>
  </thead>
  <tbody id="mainBody" class="Hidden tbody">
    <tr>
      <th>
        {^Name}
      </th>
      <td>
        {^BallotsReport}
      </td>
      <td>
        {^BallotsCollected}
      </td>
      <td>
        {^BallotsAtLocation} {^Btn}
      </td>
      <td>
        {^TallyStatus}
      </td>
      <td>
        {^ComputerList}
      </td>
      <td>
        {^ContactInfo}
      </td>
    </tr>
    <tr>
      <td>
        {ComputerCode}
      </td>
      <td>
        {BallotsAtComputer}
      </td>
      <td>
        {^TellerInfo}
      </td>
    </tr>
  </tbody>
</table>
<table class="Ballots">
  <thead>
    <tr>
      <th>
        Ballot
      </th>
      <th>
        Status
      </th>
      <th>
        Tellers
      </th>
      <th>
        Location
      </th>
    </tr>
  </thead>
  <tbody id="ballotsBody" class="Hidden tbody">
    <tr>
      <th>
        {Code} {^Btn}
      </th>
      <td>
        {Status}
      </td>
      <td>
        {Tellers}
      </td>
      <td>
        {LocationName}
      </td>
    </tr>
  </tbody>
</table>
<div style="padding-top: 15px;">
  @*<div class="float-left">
        Election Status:<br/>
        <select id="ddlElectionStatus" size="@ElectionTallyStatusEnum.Count">
            @ElectionTallyStatusEnum.ForHtmlSelect(UserSession.CurrentElection.TallyStatus)
        </select>
    </div>*@
  <p class="AutoButtons">
    <input type="checkbox" id="chkAutoRefresh" />
    <label for="chkAutoRefresh">Auto-refresh this list every </label>
    <select id="ddlRefresh" class="input-medium">
      <option value="15">15 seconds</option>
      <option value="30">30 seconds</option>
      <option value="60">minute</option>
      <option value="120">2 minutes</option>
    </select>
    <button type="button" class="btn btn-mini" id="btnRefesh" accesskey="R">
      <u>R</u>efresh Now
    </button>
    <span id="lastRefreshArea">
      Refreshed at <span id="lastRefresh"></span>
      <span class="countdownOuter">
        <span class="countdown"></span>
      </span>
    </span>
  </p>
  @if (UserSession.IsKnownTeller)
  {
    <p>
      <input type="checkbox" id="chkList" @(UserSession.CurrentElection.ListForPublic.AsBoolean() ? " checked" : "") />
      <label for="chkList">
        Open this election to allow other tellers to participate.
        Teller access code is: <span class="publicInfo">@UserSession.CurrentElection.ElectionPasscode.DefaultTo("?")</span>
        @if (UserSession.CurrentElection.ElectionPasscode.HasNoContent())
        {
          <span class="warning">(Code must first be set on the <a href="../Setup#step2">Configure page</a>.)</span>
        }
      </label>
    </p>
  }

  @if (UserSession.EnableOnlineElections)
  {
    <div id="onlineDiv">
      <h2>Online Voting</h2>
      <table class="OnlineSettings">
        <thead>
        <tr>
          <th></th>
          <th></th>
          <th></th>
        </tr>
        </thead>
        <tbody>
        <tr>
          <th></th>
          <td></td>
          <td></td>
        </tr>

        @*<tr>
              <th>
                Voting Start time
              </th>
              <td v-bind:class="{needOnlineDates: !onlineDatesOkay}">
                <datetime v-model="election.OnlineWhenOpen" v-on:input="saveNeeded" type="datetime" :minute-step="10" :use12-hour="election.T24"></datetime>
                <div class="voteWhen">{{showFrom(election.OnlineWhenOpen)}}</div>
              </td>
              <td>
                When should voters be able to access this election and start working on their online ballot?
                <a class="setTime" v-on:click="election.OnlineWhenOpen = new Date().toISOString()">Set to now.</a>
              </td>
            </tr>*@
        <tr>
          <td colspan="3">
            <p>Online voting close time: {{showFrom(election.OnlineWhenClose)}}.</p>
            <button>Close in 5 minutes.</button>
            <button>Close now.</button>
          </td>
        </tr>
        <tr>
          <th>
            Voting Stop time
          </th>
          <td v-bind:class="{needOnlineDates: !onlineDatesOkay}">
            <datetime v-model="election.OnlineWhenClose" v-on:input="saveNeeded" type="datetime" :minute-step="10" :use12-hour="election.T24"></datetime>
          </td>
          <td>
            When should the election be closed?
            <a class="setTime" v-on:click="election.OnlineWhenClose = new Date().toISOString()">Set to now.</a>
            <p>The Head Teller can adjust the stop time during the election. Suggestion: Manually close online voting once all paper ballots are collected and counted.</p>
          </td>
        </tr>
        <tr>
          <th>
            Voting Stop time estimated?
          </th>
          <td>
            <yes-no v-model="election.OnlineCloseIsEstimate"></yes-no>
          </td>
          <td>
            Is the stopping time above an estimated time?
          </td>
        </tr>
        <tr>
          <th>
            View Results?
          </th>
          <td>
            <yes-no v-model="election.OnlineAllowResultView"></yes-no>
          </td>
          <td>
            Allow voters to view the final election report when it is available?
          </td>
        </tr>
        </tbody>
      </table>
      <h3>Online Ballots</h3>
      <table class="OnlineBallots">
        <thead>
          <tr>
            <th>
              Voter
            </th>
            <th>
              Registration
            </th>
            <th>
              Status
            </th>
          </tr>
        </thead>
        <tbody id="onlineBallotsBody" class="Hidden tbody">
          <tr>
            <td>
              {C_FullNameFL}
            </td>
            <td>
              {VotingMethod_Display}
            </td>
            <td title="{History_Tip}">
              {History_Display}
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  }
</div>



<script type="text/x-template" id="yes-no">
  <span class="YN" v-bind:class="['YN' + yesNo, disabled ? 'disabled' : '']">
    <label>
      <input type="radio" value="Y" v-model="yesNo" :disabled="disabled">
      {{yes}}
    </label>
    <label>
      <input type="radio" value="N" v-model="yesNo" :disabled="disabled">
      {{no}}
    </label>
  </span>
</script>
